/*******************************************************************************
 *   Created: 2017/09/03 16:49:51
 *    Author: Eugene V. Palchukovsky
 *    E-mail: eugene@palchukovsky.com
 * -------------------------------------------------------------------
 *   Project: Trading Robot Development Kit
 *       URL: http://robotdk.com
 * Copyright: Eugene V. Palchukovsky
 ******************************************************************************/

#include "Prec.hpp"
#include "Core/ContextMock.hpp"
#include "Core/SecurityMock.hpp"
#include "Services/BarServiceMock.hpp"
#include "DocFeelsCumulativeReturnService.hpp"

using namespace testing;
using namespace trdk::Tests;

namespace df = trdk::Strategies::DocFeels;
namespace tms = trdk::Lib::TimeMeasurement;
namespace svc = trdk::Services;
namespace lib = trdk::Lib;
namespace pt = boost::posix_time;

////////////////////////////////////////////////////////////////////////////////

namespace {

class RGeneratorMock : public df::CumulativeReturnService::RGenerator {
 public:
  virtual ~RGeneratorMock() override = default;

 public:
  MOCK_CONST_METHOD0(Generate, df::CumulativeReturnService::Point::R());
};

class Service : public df::CumulativeReturnService {
 public:
  typedef df::CumulativeReturnService Base;

 public:
  explicit Service(trdk::Context &context,
                   const lib::IniSectionRef &conf,
                   const boost::shared_ptr<RGenerator> &rGenerator)
      : Base(context, "Test", conf, rGenerator) {}

 public:
  using Base::OnServiceDataUpdate;
};
}

////////////////////////////////////////////////////////////////////////////////

namespace {

const lib::Double onlineDataSource[][16] = {
    {7900, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {7888, -0.15, -0.15, -0.15, -0.15, -0.15, 0.15, 0.15, -0.15, -0.15, 0.15,
     0.15, 0, 0, 0, 0},
    {7907, 0.24, 0.09, 0.09, 0.09, 0.09, -0.09, -0.09, -0.06, -0.06, 0.06, 0.06,
     -0.15, -0.15, 0.15, 0.15},
    {7924, 0.21, 0.3, 0.3, 0.3, 0.3, -0.3, -0.3, 0.24, 0.24, -0.24, -0.24,
     -0.21, -0.21, 0.21, 0.21},
    {7907, -0.21, 0.09, 0.09, 0.09, 0.09, -0.09, -0.09, 0.33, 0.33, -0.33,
     -0.33, 0.03, 0.03, -0.03, -0.03},
    {7925, 0.23, 0.32, 0.32, 0.32, 0.32, -0.32, -0.32, 0.65, 0.65, -0.65, -0.65,
     0.36, 0.36, -0.36, -0.36},
    {7944, 0.24, 0.56, 0.56, 0.56, 0.56, -0.56, -0.56, 1.21, 1.21, -1.21, -1.21,
     1.01, 1.01, -1.01, -1.01},
    {7959, 0.19, 0.75, 0.75, 0.75, 0.75, -0.75, -0.75, 1.96, 1.96, -1.96, -1.96,
     2.22, 2.22, -2.22, -2.22},
    {7940, -0.24, 0.51, 0.51, 0.51, 0.51, -0.51, -0.51, 2.47, 2.47, -2.47,
     -2.47, 4.18, 4.18, -4.18, -4.18},
    {7922, -0.23, 0.28, 0.28, 0.28, 0.28, -0.28, -0.28, 2.75, 2.75, -2.75,
     -2.75, 6.65, 6.65, -6.65, -6.65},
    {7932, 0.13, 0.41, 0.41, 0.41, 0.41, -0.41, -0.41, 3.16, 3.16, -3.16, -3.16,
     9.4, 9.4, -9.4, -9.4},
    {7920, -0.15, 0.26, 0.25, 0.26, 0.25, -0.26, -0.25, 3.42, 3.41, -3.42,
     -3.41, 12.56, 12.56, -12.56, -12.56},
    {7938, 0.23, 0.49, 0.48, 0.49, 0.48, -0.49, -0.48, 3.91, 3.89, -3.91, -3.89,
     15.98, 15.97, -15.98, -15.97},
    {7958, 0.25, 0.74, 0.73, 0.74, 0.73, -0.74, -0.73, 4.65, 4.62, -4.65, -4.62,
     19.89, 19.86, -19.89, -19.86},
    {7968, 0.13, 0.87, 0.86, 0.87, 0.86, -0.87, -0.86, 5.52, 5.48, -5.52, -5.48,
     24.54, 24.48, -24.54, -24.48},
    {7958, -0.13, 0.74, 0.73, 0.74, 0.73, -0.74, -0.73, 6.26, 6.21, -6.26,
     -6.21, 30.06, 29.96, -30.06, -29.96},
    {7946, -0.15, 0.59, 0.58, 0.59, 0.58, -0.59, -0.58, 6.85, 6.79, -6.85,
     -6.79, 36.32, 36.17, -36.32, -36.17},
    {7936, -0.13, 0.46, 0.46, 0.46, 0.46, -0.46, -0.46, 7.31, 7.25, -7.31,
     -7.25, 43.17, 42.96, -43.17, -42.96},
    {7926, -0.13, 0.33, 0.33, 0.33, 0.33, -0.33, -0.33, 7.64, 7.58, -7.64,
     -7.58, 50.48, 50.21, -50.48, -50.21},
    {7946, 0.25, 0.58, 0.58, 0.58, 0.58, -0.58, -0.58, 8.22, 8.16, -8.22, -8.16,
     58.12, 57.79, -58.12, -57.79},
    {7957, 0.14, 0.72, 0.72, 0.72, 0.72, -0.72, -0.72, 8.94, 8.88, -8.94, -8.88,
     66.34, 65.95, -66.34, -65.95},
    {7941, -0.2, 0.52, 0.52, 0.52, 0.52, -0.52, -0.52, 9.46, 9.4, -9.46, -9.4,
     75.28, 74.83, -75.28, -74.83},
    {7961, 0.25, 0.77, 0.77, 0.77, 0.77, -0.77, -0.77, 10.23, 10.17, -10.23,
     -10.17, 84.74, 84.23, -84.74, -84.23},
    {7950, -0.14, 0.63, 0.63, 0.63, 0.63, -0.63, -0.63, 10.86, 10.8, -10.86,
     -10.8, 94.97, 94.4, -94.97, -94.4},
    {7968, 0.23, 0.86, 0.86, 0.86, 0.86, -0.86, -0.86, 11.72, 11.66, -11.72,
     -11.66, 105.83, 105.2, -105.83, -105.2},
    {7988, 0.25, 1.11, 1.11, 1.11, 1.11, -1.11, -1.11, 12.83, 12.77, -12.83,
     -12.77, 117.55, 116.86, -117.55, -116.86},
    {7971, -0.21, 0.9, 0.9, 0.9, 0.9, -0.9, -0.9, 13.73, 13.67, -13.73, -13.67,
     130.38, 129.63, -130.38, -129.63},
    {7984, 0.16, 1.06, 1.06, 1.06, 1.06, -1.06, -1.06, 14.79, 14.73, -14.79,
     -14.73, 144.11, 143.3, -144.11, -143.3},
    {8002, 0.23, 1.29, 1.29, 1.29, 1.29, -1.29, -1.29, 16.08, 16.02, -16.08,
     -16.02, 158.9, 158.03, -158.9, -158.03},
    {8019, 0.21, 1.5, 1.51, 1.5, 1.51, -1.5, -1.51, 17.58, 17.53, -17.58,
     -17.53, 174.98, 174.05, -174.98, -174.05},
    {8039, 0.25, 1.75, 1.76, 1.75, 1.76, -1.75, -1.76, 19.33, 19.29, -19.33,
     -19.29, 192.56, 191.58, -192.56, -191.58},
    {8050, 0.14, 1.89, 1.9, 1.89, 1.9, -1.89, -1.9, 21.22, 21.19, -21.22,
     -21.19, 211.89, 210.87, -211.89, -210.87},
    {8033, -0.21, 1.68, 1.68, 1.68, 1.68, -1.68, -1.68, 22.9, 22.87, -22.9,
     -22.87, 233.26, 232.21, -233.26, -232.21},
    {8050, 0.21, 1.89, 1.9, 1.89, 1.9, -1.89, -1.9, 24.79, 24.77, -24.79,
     -24.77, 256.22, 255.14, -256.22, -255.14},
    {8060, 0.12, 2.01, 2.03, 2.01, 2.03, -2.01, -2.03, 26.8, 26.8, -26.8, -26.8,
     280.77, 279.67, -280.77, -279.67},
    {8043, -0.21, 1.8, 1.81, 1.8, 1.81, -1.8, -1.81, 28.6, 28.61, -28.6, -28.61,
     307.24, 306.14, -307.24, -306.14},
    {8031, -0.15, 1.65, 1.66, 1.65, 1.66, -1.65, -1.66, 30.25, 30.27, -30.25,
     -30.27, 335.19, 334.1, -335.19, -334.1},
    {8012, -0.24, 1.41, 1.42, 1.41, 1.42, -1.41, -1.42, 31.66, 31.69, -31.66,
     -31.69, 364.23, 363.16, -364.23, -363.16},
    {8022, 0.12, 1.53, 1.54, 1.53, 1.54, -1.53, -1.54, 33.19, 33.23, -33.19,
     -33.23, 393.93, 392.89, -393.93, -392.89},
    {8038, 0.2, 1.73, 1.75, 1.73, 1.75, -1.73, -1.75, 34.92, 34.98, -34.92,
     -34.98, 424.65, 423.65, -424.65, -423.65},
    {8048, 0.12, 1.85, 1.87, 1.85, 1.87, -1.85, -1.87, 36.77, 36.85, -36.77,
     -36.85, 456.82, 455.88, -456.82, -455.88},
    {8029, -0.24, 1.61, 1.63, 1.61, 1.63, -1.61, -1.63, 38.38, 38.48, -38.38,
     -38.48, 490.43, 489.57, -490.43, -489.57},
    {8047, 0.22, 1.83, 1.86, 1.83, 1.86, -1.83, -1.86, 40.21, 40.34, -40.21,
     -40.34, 525.39, 524.64, -525.39, -524.64},
    {8061, 0.17, 2, 2.04, 2, 2.04, -2, -2.04, 42.21, 42.38, -42.21, -42.38,
     561.69, 561.09, -561.69, -561.09},
    {8078, 0.21, 2.21, 2.25, 2.21, 2.25, -2.21, -2.25, 44.42, 44.63, -44.42,
     -44.63, 599.25, 598.85, -599.25, -598.85},
    {8095, 0.21, 2.42, 2.47, 2.42, 2.47, -2.42, -2.47, 46.84, 47.1, -46.84,
     -47.1, 638.15, 638, -638.15, -638},
    {8080, -0.19, 2.23, 2.28, 2.23, 2.28, -2.23, -2.28, 49.07, 49.38, -49.07,
     -49.38, 678.73, 678.89, -678.73, -678.89},
    {8069, -0.14, 2.09, 2.14, 2.09, 2.14, -2.09, -2.14, 51.16, 51.52, -51.16,
     -51.52, 720.95, 721.48, -720.95, -721.48},
    {8053, -0.2, 1.89, 1.94, 1.89, 1.94, -1.89, -1.94, 53.05, 53.46, -53.05,
     -53.46, 764.8, 765.75, -764.8, -765.75},
    {8035, -0.22, 1.67, 1.71, 1.67, 1.71, -1.67, -1.71, 54.72, 55.17, -54.72,
     -55.17, 810.21, 811.63, -810.21, -811.63},
    {8019, -0.2, 1.47, 1.51, 1.47, 1.51, -1.47, -1.51, 56.19, 56.68, -56.19,
     -56.68, 856.71, 858.64, -856.71, -858.64},
    {7999, -0.25, 1.22, 1.25, 1.22, 1.25, -1.22, -1.25, 57.41, 57.93, -57.41,
     -57.93, 903.96, 906.44, -903.96, -906.44},
    {7984, -0.19, 1.03, 1.06, 1.03, 1.06, -1.03, -1.06, 58.44, 58.99, -58.44,
     -58.99, 951.91, 954.97, -951.91, -954.97},
    {7973, -0.14, 0.89, 0.92, 0.89, 0.92, -0.89, -0.92, 59.33, 59.91, -59.33,
     -59.91, 1000.12, 1003.79, -1000.12, -1003.79},
    {7960, -0.16, 0.73, 0.76, 0.73, 0.76, -0.73, -0.76, 60.06, 60.67, -60.06,
     -60.67, 1048.59, 1052.9, -1048.59, -1052.9},
    {7972, 0.15, 0.88, 0.91, 0.88, 0.91, -0.88, -0.91, 60.94, 61.58, -60.94,
     -61.58, 1096.93, 1101.91, -1096.93, -1101.91},
    {7990, 0.23, 1.11, 1.14, 1.11, 1.14, -1.11, -1.14, 62.05, 62.72, -62.05,
     -62.72, 1145.04, 1150.72, -1145.04, -1150.72},
    {8003, 0.16, 1.27, 1.3, 1.27, 1.3, -1.27, -1.3, 63.32, 64.02, -63.32,
     -64.02, 1193.36, 1199.77, -1193.36, -1199.77},
    {7990, -0.16, 1.11, 1.14, 1.11, 1.14, -1.11, -1.14, 64.43, 65.16, -64.43,
     -65.16, 1241.89, 1249.06, -1241.89, -1249.06},
    {8007, 0.21, 1.32, 1.35, 1.32, 1.35, -1.32, -1.35, 65.75, 66.51, -65.75,
     -66.51, 1290.24, 1298.2, -1290.24, -1298.2},
    {7993, -0.17, 1.15, 1.18, 1.15, 1.18, -1.15, -1.18, 66.9, 67.69, -66.9,
     -67.69, 1338.41, 1347.18, -1338.41, -1347.18},
    {7975, -0.23, 0.92, 0.95, 0.92, 0.95, -0.92, -0.95, 67.82, 68.64, -67.82,
     -68.64, 1385.98, 1395.58, -1385.98, -1395.58},
    {7965, -0.13, 0.79, 0.82, 0.79, 0.82, -0.79, -0.82, 68.61, 69.46, -68.61,
     -69.46, 1432.58, 1443.03, -1432.58, -1443.03},
    {7949, -0.2, 0.59, 0.62, 0.59, 0.62, -0.59, -0.62, 69.2, 70.08, -69.2,
     -70.08, 1478.29, 1489.62, -1478.29, -1489.62},
};
}

TEST(DocFeels_CumulativeReturnService, DISABLED_OnlineData) {
  std::string settingsString(
      "[Section]\n"
      "id = {00000000-0000-0000-0000-000000000000}\n"
      "cr_period = 30\n"
      "size_of_rt_set = 2\n"
      "log = no\n");
  const lib::IniString settings(settingsString);

  Mocks::Context context;

  auto rGenerator = boost::make_shared<RGeneratorMock>();

  Service service(context, lib::IniSectionRef(settings, "Section"), rGenerator);

  Mocks::Security security;

  Mocks::BarService bars;
  EXPECT_CALL(bars, GetSecurity()).WillRepeatedly(ReturnRef(security));
  EXPECT_CALL(bars, GetSize()).WillRepeatedly(Return(1));

  pt::ptime time = pt::microsec_clock::local_time();

  size_t rowNumber = 0;
  for (const auto &row : onlineDataSource) {
    ++rowNumber;
    time += pt::seconds(123);

    svc::BarService::Bar bar;
    bar.time = time;
    bar.closeTradePrice = trdk::ScaledPrice(lib::Scale(row[0], 100));
    EXPECT_CALL(bars, GetLastBar()).Times(1).WillOnce(Return(bar));

    if (rowNumber > 1) {
      EXPECT_CALL(*rGenerator, Generate())
          .WillOnce(
              Return(static_cast<df::CumulativeReturnService::Point::R>(1)))
          .WillOnce(
              Return(static_cast<df::CumulativeReturnService::Point::R>(-1)));
    }

    const bool isActivated = rowNumber > 31;
    ASSERT_EQ(isActivated, service.OnServiceDataUpdate(bars, tms::Milestones()))
        << rowNumber;
    if (!isActivated) {
      EXPECT_TRUE(service.IsEmpty());
      EXPECT_THROW(service.GetLastPoint(), lib::Exception);
      continue;
    }
    ASSERT_FALSE(service.IsEmpty());
    const Service::Point &point = service.GetLastPoint();

    EXPECT_EQ(time, point.time) << rowNumber;
    EXPECT_DOUBLE_EQ(row[0], point.source) << rowNumber;
    EXPECT_NEAR(row[1], point.change, 0.00000000001) << rowNumber;
    EXPECT_NEAR(row[2], point.tOld, 0.00000000001) << rowNumber;
    EXPECT_NEAR(row[3], point.tNew, 0.00000000001) << rowNumber;

    ASSERT_EQ(2, point.branches.size()) << rowNumber;

    EXPECT_EQ(1, point.branches[0].r) << rowNumber;
    EXPECT_EQ(-1, point.branches[1].r) << rowNumber;

    EXPECT_NEAR(row[4], point.branches[0].tOld.rt, 0.00000000001) << rowNumber;
    EXPECT_NEAR(row[5], point.branches[0].tNew.rt, 0.00000000001) << rowNumber;
    EXPECT_NEAR(row[6], point.branches[1].tOld.rt, 0.00000000001) << rowNumber;
    EXPECT_NEAR(row[7], point.branches[1].tNew.rt, 0.00000000001) << rowNumber;

    EXPECT_NEAR(row[8], point.branches[0].tOld.cr, 0.00000000001) << rowNumber;
    EXPECT_NEAR(row[9], point.branches[0].tNew.cr, 0.00000000001) << rowNumber;
    EXPECT_NEAR(row[10], point.branches[1].tOld.cr, 0.00000000001) << rowNumber;
    EXPECT_NEAR(row[11], point.branches[1].tNew.cr, 0.00000000001) << rowNumber;

    EXPECT_NEAR(row[12], point.branches[0].tOld.crPeriod, 0.00000000001)
        << rowNumber;
    EXPECT_NEAR(row[13], point.branches[0].tNew.crPeriod, 0.00000000001)
        << rowNumber;
    EXPECT_NEAR(row[14], point.branches[1].tOld.crPeriod, 0.00000000001)
        << rowNumber;
    EXPECT_NEAR(row[15], point.branches[1].tNew.crPeriod, 0.00000000001)
        << rowNumber;
  }
}

////////////////////////////////////////////////////////////////////////////////
