//**************************************************
// Dear Eugene
//
//	This very simple code does nothing more than calculate and 
// plot the Delta of each option group, namely, Puts and Calls.
//
//	In order to calculate the Delta value, one needed input is the IV.
//
//	From my previous experience, I believe that you should be aware
// that I will be using in this code four EUR.USD Forex FOP (Future Options).
//
//	IMPORTANT: To get some result from this code, it must be plotted as an indicator
// below the EUR.USD Forex chart (or IDEALPRO cash contract) as it uses its "close" value to calculate
// the Delta.
//
//	Some information you may need to code your dll:
//
// All expiration dates for the series defined below: 20140905
//
// ***** The four options used are described here:

// Product 		EUR
// Security Type 	FOP
// Underlying 	6EU4 SEP 15 '14 FUT
// Contract Month 	SEP14
// Expiration 	SEP 05 '14 14:00 CST
// Strike 		1.365
// Right 		Put
// Currency 		USD
// Multiplier 	125000
// Exchange 		GLOBEX
// Symbol 		6EU4 P1365
// Trading 		Class 6E
// Product Type 	Foreign Exchange
// Settlement Method Physical Delivery
// Exercise Style 	American

// Product		EUR
// Security Type	FOP
// Underlying		6EU4 SEP 15 '14 FUT
// Contract Month	SEP14
// Expiration		SEP 05 '14 14:00 CST
// Strike		1.37
// Right		Put
// Currency		USD
// Multiplier		125000
// Exchange		GLOBEX
// Symbol		6EU4 P1370
// Trading Class	6E
// Product Type	Foreign Exchange
// Settlement Method	Physical Delivery
// Exercise Style	American

// Product		EUR
// Security Type	FOP
// Underlying		6EU4 SEP 15 '14 FUT
// Contract Month	SEP14
// Expiration		SEP 05 '14 14:00 CST
// Strike		1.37
// Right		Call
// Currency		USD
// Multiplier		125000
// Exchange		GLOBEX
// Symbol		6EU4 C1370
// Trading Class	6E
// Product Type	Foreign Exchange
// Settlement Method	Physical Delivery
// Exercise Style	American

// Product		EUR
// Security Type	FOP
// Underlying		6EU4 SEP 15 '14 FUT
// Contract Month	SEP14
// Expiration		SEP 05 '14 14:00 CST
// Strike		1.375
// Right		Call
// Currency		USD
// Multiplier		125000
// Exchange		GLOBEX
// Symbol		6EU4 C1375
// Trading Class	6E
// Product Type	Foreign Exchange
// Settlement Method	Physical Delivery
// Exercise Style	American


//=================================
// 	Another way to describe the same options
// (data got when I exported a page inside TWS with these options)
//=================================

//	DES,EUR,FOP,GLOBEX,201409,1.365,Put,125000,
//	DES,EUR,FOP,GLOBEX,201409,1.37,Put,125000,
//	DES,EUR,FOP,GLOBEX,201409,1.37,Call,125000,
//	DES,EUR,FOP,GLOBEX,201409,1.375,Call,125000,

//=================================

// Returns Implied Volatility from TWS.
// Use test-suffix in DLL name for testing. In test version: creates log-file
// "C:/Jts/trdk.log" and makes some additional debug checks that, doesn't
// required in production.
external:
	"Trdk.dll", {For production: "Trdk.dll", for tests: "Trdk_test.dll".}
	double, {Returns actual Implied Volatility value or zero (0) at error.}
	"GetImpliedVolatility",
	string, {Symbol. Ex.: "EUR"}
	string, {Exchange. Ex.: "GLOBEX"}
	string, {Expiration data. Ex.: "20140905" for Sep 05 2014}
	double, {Strike. Ex.: 1.365}
	string, {Right. Can be "Put" or "Call"}
	string {Trading class. Ex.: "6E".};

inputs: 
Pos_Put_1  (4),	{Positive or negative position in the first PUT}
Pos_Put_2  (7),	{Positive or negative position in the second PUT}

Pos_Call_1  (3),	{Positive or negative position in the first CALL}
Pos_Call_2  (5),	{Positive or negative position in the second CALL}


//    Strikes for two PUTs and two CALLs
Str_Put_1  ( 1.365 ),	{The strikes do change overtime, so they will be kept here in the input session }
Str_Put_2  ( 1.37 ), 	{The strikes do change overtime, so they will be kept here in the input session }

Str_Call_1 ( 1.37 ), 	{The strikes do change overtime, so they will be kept here in the input session }
Str_Call_2 ( 1.375 ), 	{The strikes do change overtime, so they will be kept here in the input session }


// Expiration month and year for the followed Options
ExpMonth_Put_1 ( 09 ), 
ExpYear_Put_1  ( 2014 ), 
ExpMonth_Put_2 ( 09 ), 
ExpYear_Put_2  ( 2014 ), 

ExpMonth_Call_1  ( 09 ), 
ExpYear_Call_1   ( 2014 ), 
ExpMonth_Call_2  ( 09 ), 
ExpYear_Call_2   ( 2014 ), 


// Inputs below to keep compatibility with my program
Rate_for_all ( 0 ),
Put_for_all  ( Put ) ,
Call_for_all ( call );

variables: 
// These variables deal with Expiration Year
var1  ( 0 ),
var2  ( 0 ),
var3  ( 0 ),
var11 ( 0 ),
var12 ( 0 ),
IV_Put_1   ( 0 ), 
IV_Put_2   ( 0 ), 
IV_Call_1  ( 0 ), 
IV_Call_2  ( 0 ),
isLogInited( 0 );

// Expiration year mus follow this format to be used in the @Delta function
var1  = ExpYear_Put_1  - 1900;
var2  = ExpYear_Put_2  - 1900;
var11 = ExpYear_Call_1 - 1900;
var12 = ExpYear_Call_2 - 1900;


IV_Put_1 = GetImpliedVolatility(GetSymbolName, "GLOBEX", "20140905",  1.365, "Put", "6E");
IV_Put_2 = GetImpliedVolatility(GetSymbolName, "GLOBEX", "20140905",  1.37,  "Put", "6E");
IV_Call_1 = GetImpliedVolatility(GetSymbolName, "GLOBEX", "20140905", 1.37, "Call", "6E");
IV_Call_2 = GetImpliedVolatility(GetSymbolName, "GLOBEX", "20140905", 1.375, "Call", "6E");

Plot1(IV_Put_1, "IV_Put1", red, default, 1);
Plot2(IV_Put_2, "IV_Put2", darkred, default, 1);
Plot3(IV_Call_1, "IV_Call1", green, default, 1);
Plot4(IV_Call_2, "IV_Call1", darkgreen, default, 1);

