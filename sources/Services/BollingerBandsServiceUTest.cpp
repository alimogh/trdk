/**************************************************************************
 *   Created: 2013/11/17 13:38:56
 *    Author: Eugene V. Palchukovsky
 *    E-mail: eugene@palchukovsky.com
 * -------------------------------------------------------------------
 *   Project: Trading Robot Development Kit
 *       URL: http://robotdk.com
 * Copyright: Eugene V. Palchukovsky
 **************************************************************************/

#include "Prec.hpp"
#include "BollingerBandsService.hpp"
#include "Tests/MockContext.hpp"

namespace pt = boost::posix_time;
namespace lib = trdk::Lib;
namespace svc = trdk::Services;

using namespace trdk::Tests;

////////////////////////////////////////////////////////////////////////////////

namespace {
	
	const double source[110][4] = {
		/* 	Close		SMA					High				Low	 */
		{	1642.81	,	0.00000000000	,	0.00000000000	,	0.00000000000	},
		{	1626.13	,	0.00000000000	,	0.00000000000	,	0.00000000000	},
		{	1612.52	,	0.00000000000	,	0.00000000000	,	0.00000000000	},
		{	1636.36	,	0.00000000000	,	0.00000000000	,	0.00000000000	},
		{	1626.73	,	0.00000000000	,	0.00000000000	,	0.00000000000	},
		{	1639.04	,	0.00000000000	,	0.00000000000	,	0.00000000000	},
		{	1651.81	,	0.00000000000	,	0.00000000000	,	0.00000000000	},
		{	1628.93	,	0.00000000000	,	0.00000000000	,	0.00000000000	},
		{	1588.19	,	0.00000000000	,	0.00000000000	,	0.00000000000	},
		{	1592.43	,	0.00000000000	,	0.00000000000	,	0.00000000000	},
		{	1573.09	,	0.00000000000	,	0.00000000000	,	0.00000000000	},
		{	1588.03	,	0.00000000000	,	0.00000000000	,	0.00000000000	},
		{	1603.26	,	0.00000000000	,	0.00000000000	,	0.00000000000	},
		{	1613.2	,	0.00000000000	,	0.00000000000	,	0.00000000000	},
		{	1606.28	,	0.00000000000	,	0.00000000000	,	0.00000000000	},
		{	1614.96	,	0.00000000000	,	0.00000000000	,	0.00000000000	},
		{	1614.08	,	0.00000000000	,	0.00000000000	,	0.00000000000	},
		{	1615.41	,	0.00000000000	,	0.00000000000	,	0.00000000000	},
		{	1631.89	,	0.00000000000	,	0.00000000000	,	0.00000000000	},
		{	1640.46	,	1617.28000000000	,	1658.22828615461	,	1576.33171384539	},
		{	1652.32	,	1617.76000000000	,	1660.08091653072	,	1575.43908346928	},
		{	1652.62	,	1619.08000000000	,	1663.94778018801	,	1574.21221981199	},
		{	1675.02	,	1622.21000000000	,	1673.11474141964	,	1571.30525858036	},
		{	1680.19	,	1624.40000000000	,	1681.00788358524	,	1567.79211641476	},
		{	1682.5	,	1627.19000000000	,	1689.21783809710	,	1565.16216190290	},
		{	1676.26	,	1629.05000000000	,	1694.52636895094	,	1563.57363104906	},
		{	1680.91	,	1630.50000000000	,	1699.15140880565	,	1561.84859119435	},
		{	1689.37	,	1633.52000000000	,	1706.79408908339	,	1560.24591091661	},
		{	1692.09	,	1638.72000000000	,	1713.12511925264	,	1564.31488074736	},
		{	1695.53	,	1643.87000000000	,	1719.01525887240	,	1568.72474112760	},
		{	1692.39	,	1649.84000000000	,	1720.36087925572	,	1579.31912074428	},
		{	1685.94	,	1654.73000000000	,	1720.86574113896	,	1588.59425886104	},
		{	1690.25	,	1659.08000000000	,	1722.48840930823	,	1595.67159069177	},
		{	1691.65	,	1663.01000000000	,	1724.24837535402	,	1601.77162464598	},
		{	1685.33	,	1666.96000000000	,	1723.02918914163	,	1610.89081085837	},
		{	1685.96	,	1670.51000000000	,	1721.74267093369	,	1619.27732906631	},
		{	1685.73	,	1674.09000000000	,	1718.62036083393	,	1629.55963916607	},
		{	1706.87	,	1678.66000000000	,	1716.41585167891	,	1640.90414832109	},
		{	1709.67	,	1682.55000000000	,	1716.01221815720	,	1649.08778184280	},
		{	1707.14	,	1685.89000000000	,	1714.90375198074	,	1656.87624801926	},
		{	1697.37	,	1688.14000000000	,	1713.09046971502	,	1663.18953028498	},
		{	1690.91	,	1690.05000000000	,	1708.94637150355	,	1671.15362849645	},
		{	1697.48	,	1691.18000000000	,	1709.00843806956	,	1673.35156193044	},
		{	1691.42	,	1691.74000000000	,	1708.84149265415	,	1674.63850734585	},
		{	1689.47	,	1692.09000000000	,	1708.70127580892	,	1675.47872419108	},
		{	1694.16	,	1692.98000000000	,	1707.92961752019	,	1678.03038247981	},
		{	1685.39	,	1693.21000000000	,	1707.55124876013	,	1678.86875123987	},
		{	1661.32	,	1691.80000000000	,	1711.75504475064	,	1671.84495524936	},
		{	1655.83	,	1689.99000000000	,	1715.36435829730	,	1664.61564170270	},
		{	1646.06	,	1687.52000000000	,	1719.13053311793	,	1655.90946688207	},
		{	1652.35	,	1685.52000000000	,	1720.53125733246	,	1650.50874266754	},
		{	1642.8	,	1683.36000000000	,	1723.00915716633	,	1643.71084283367	},
		{	1656.96	,	1681.69000000000	,	1722.80987805186	,	1640.57012194814	},
		{	1663.5	,	1680.29000000000	,	1721.87478635270	,	1638.70521364730	},
		{	1656.78	,	1678.86000000000	,	1721.59829022083	,	1636.12170977917	},
		{	1630.48	,	1676.08000000000	,	1723.55410598421	,	1628.60589401579	},
		{	1634.96	,	1673.55000000000	,	1724.02427637916	,	1623.07572362084	},
		{	1638.17	,	1670.11000000000	,	1720.39568539853	,	1619.82431460147	},
		{	1632.97	,	1666.28000000000	,	1715.60270406213	,	1616.95729593787	},
		{	1639.77	,	1662.91000000000	,	1709.74889703014	,	1616.07110296986	},
		{	1653.08	,	1660.69000000000	,	1704.91724730299	,	1616.46275269701	},
		{	1655.08	,	1658.90000000000	,	1700.93450072262	,	1616.86549927738	},
		{	1655.17	,	1656.79000000000	,	1694.92295918231	,	1618.65704081769	},
		{	1671.71	,	1655.80000000000	,	1691.22428685238	,	1620.37571314762	},
		{	1683.99	,	1655.53000000000	,	1689.97970727016	,	1621.08029272984	},
		{	1689.13	,	1655.28000000000	,	1688.65452471572	,	1621.90547528428	},
		{	1683.42	,	1655.18000000000	,	1688.20825534296	,	1622.15174465704	},
		{	1687.99	,	1656.51000000000	,	1692.44813295095	,	1620.57186704905	},
		{	1697.6	,	1658.60000000000	,	1698.74582432832	,	1618.45417567168	},
		{	1704.76	,	1661.53000000000	,	1705.93680500779	,	1617.12319499221	},
		{	0	,	0.00000000000	,	0.00000000000	,	0.00000000000	},
		{	1725.52	,	1665.19000000000	,	1717.34757801125	,	1613.03242198875	},
		{	1722.34	,	1669.17000000000	,	1725.82726145870	,	1612.51273854130	},
		{	1709.91	,	1671.82000000000	,	1730.84679163736	,	1612.79320836264	},
		{	1701.84	,	1673.73000000000	,	1734.02852279285	,	1613.43147720715	},
		{	1697.42	,	1675.77000000000	,	1736.38453273762	,	1615.15546726238	},
		{	1692.77	,	1678.88000000000	,	1736.17743833715	,	1621.58256166285	},
		{	1698.67	,	1682.07000000000	,	1736.24510811249	,	1627.89489188751	},
		{	1691.75	,	1684.74000000000	,	1735.13473284977	,	1634.34526715023	},
		{	1681.55	,	1687.17000000000	,	1731.68909849716	,	1642.65090150284	},
		{	1695	,	1689.94000000000	,	1728.85373870499	,	1651.02626129501	},
		{	1693.87	,	1691.97000000000	,	1727.02822954743	,	1656.91177045257	},
		{	1678.66	,	1693.15000000000	,	1724.56231686775	,	1661.73768313225	},
		{	1690.5	,	1694.92000000000	,	1721.13279305988	,	1668.70720694012	},
		{	1676.12	,	1695.14000000000	,	1720.63241493072	,	1669.64758506928	},
		{	1655.45	,	1693.71000000000	,	1724.23733743712	,	1663.18266256288	},
		{	1656.4	,	1692.08000000000	,	1726.65547633801	,	1657.50452366199	},
		{	1692.56	,	1692.53000000000	,	1726.87655872136	,	1658.18344127864	},
		{	1703.2	,	1693.29000000000	,	1727.87317190484	,	1658.70682809516	},
		{	1710.14	,	1693.92000000000	,	1729.23954092284	,	1658.60045907716	},
		{	1698.06	,	1693.59000000000	,	1728.61787305847	,	1658.56212694153	},
		{	1721.54	,	1693.39000000000	,	1727.72836680741	,	1659.05163319259	},
		{	1733.15	,	1693.93000000000	,	1730.35137701955	,	1657.50862298045	},
		{	1744.5	,	1695.66000000000	,	1737.79042362711	,	1653.52957637289	},
		{	1744.66	,	1697.80000000000	,	1745.01484312163	,	1650.58515687837	},
		{	1754.67	,	1700.66000000000	,	1753.98270281972	,	1647.33729718028	},
		{	1746.38	,	1703.34000000000	,	1760.08647241019	,	1646.59352758981	},
		{	1752.07	,	1706.01000000000	,	1766.52590940406	,	1645.49409059594	},
		{	1759.77	,	1709.41000000000	,	1773.85552176063	,	1644.96447823937	},
		{	1762.11	,	1713.44000000000	,	1780.43602718818	,	1646.44397281182	},
		{	1771.95	,	1717.29000000000	,	1788.32461511123	,	1646.25538488877	},
		{	1763.31	,	1720.76000000000	,	1793.64087375986	,	1647.87912624014	},
		{	1756.54	,	1724.65000000000	,	1796.43111517663	,	1652.86888482337	},
		{	1761.64	,	1728.21000000000	,	1799.91922671456	,	1656.50077328544	},
		{	1767.93	,	1732.80000000000	,	1802.30358099408	,	1663.29641900592	},
		{	1762.97	,	1738.18000000000	,	1799.01189159479	,	1677.34810840521	},
		{	1770.49	,	1743.88000000000	,	1793.29317014724	,	1694.46682985276	},
		{	1747.15	,	1746.61000000000	,	1790.05199731826	,	1703.16800268174	},
		{	1770.61	,	1749.98000000000	,	1789.72971677887	,	1710.23028322113	},
		{	1771.89	,	1753.07000000000	,	1789.40764520439	,	1716.73235479561	},
	};

}

////////////////////////////////////////////////////////////////////////////////

class BollingerBandsServiceTest : public testing::Test {

	protected:
		
		virtual void SetUp() {
			//...//
		}

		virtual void TearDown() {
			m_service.reset();
		}

	protected:

		void TestOnlineResult() {

			SCOPED_TRACE(__FUNCTION__);

			for (size_t i = 0; i < _countof(source); ++i) {
			
				const svc::MovingAverageService::Point ma = {
					pt::not_a_date_time,
					source[i][0],
					source[i][1]
				};
			
				ASSERT_EQ(lib::IsZero(source[i][2]), lib::IsZero(source[i][3]));
				const bool hasValue = !lib::IsZero(source[i][2]);

				EXPECT_EQ(hasValue, m_service->OnNewData(ma))
					<< "i = " << i << ";";
			
				if (!hasValue) {
					continue;
				}
				const svc::BollingerBandsService::Point &point
					= m_service->GetLastPoint();
			
				EXPECT_DOUBLE_EQ(source[i][0], point.source)
					<< "i = " << i << ";"
					<< " source = " << ma.source << ";"
					<< " ma = " << ma.value << ";"
					<< " high = " << point.high << ";"
					<< " low = " << point.low << ";";

				EXPECT_NEAR(source[i][2], point.high, 0.00000000001)
					<< "i = " << i << ";"
					<< " source = " << ma.source << ";"
					<< " ma = " << ma.value << ";"
					<< " high = " << point.high << ";"
					<< " low = " << point.low << ";";
			
				EXPECT_NEAR(source[i][3], point.low, 0.00000000001)
					<< "i = " << i << ";"
					<< " source = " << ma.source << ";"
					<< " ma = " << ma.value << ";"
					<< " high = " << point.high << ";"
					<< " low = " << point.low << ";";

			}
	
		}

	protected:

		MockContext m_context;
		std::unique_ptr<svc::BollingerBandsService> m_service;

	};

TEST_F(BollingerBandsServiceTest, RealTimeWithHistory) {
	
	std::string settingsString(
		"[Section]\n"
			"id = {00000000-0000-0000-0000-000000000001}\n"
			"history = yes\n");
	const lib::IniString settings(settingsString);
	m_service.reset(
		new svc::BollingerBandsService(
			m_context,
			"Tag",
			lib::IniSectionRef(settings, "Section")));

	TestOnlineResult();

	ASSERT_NO_THROW(m_service->GetHistorySize());
	ASSERT_EQ(_countof(source) - 20, m_service->GetHistorySize());
	EXPECT_THROW(
		m_service->GetHistoryPoint(_countof(source) - 20),
		svc::BollingerBandsService::ValueDoesNotExistError);
	EXPECT_THROW(
		m_service->GetHistoryPointByReversedIndex(_countof(source) - 20),
		svc::BollingerBandsService::ValueDoesNotExistError);

	size_t offset = 19;
	for (size_t i = 0; i < m_service->GetHistorySize(); ++i) {

		auto pos = i + offset;
		ASSERT_EQ(lib::IsZero(source[pos][2]), lib::IsZero(source[pos][3]));
		if (lib::IsZero(source[pos][2])) {
			++offset;
			++pos;
		}
		ASSERT_LT(pos, _countof(source));
		
		const svc::BollingerBandsService::Point &point
			= m_service->GetHistoryPoint(i);

		EXPECT_DOUBLE_EQ(source[pos][0], point.source)
			<< "i = " << i << ";"
			<< " pos = " << pos << ";"
			<< " source = " << source[pos][0] << ";"
			<< " ma = " << source[pos][1] << ";"
			<< " high = " << point.high << ";"
			<< " low = " << point.low << ";";

		EXPECT_NEAR(source[pos][2], point.high, 0.00000000001)
			<< "i = " << i << ";"
			<< " pos = " << pos << ";"
			<< " source = " << source[pos][0] << ";"
			<< " ma = " << source[pos][1] << ";"
			<< " high = " << point.high << ";"
			<< " low = " << point.low << ";";
			
		EXPECT_NEAR(source[pos][3], point.low, 0.00000000001)
			<< "i = " << i << ";"
			<< " pos = " << pos << ";"
			<< " source = " << source[pos][0] << ";"
			<< " ma = " << source[pos][1] << ";"
			<< " high = " << point.high << ";"
			<< " low = " << point.low << ";";

	}

	offset = 0;
	for (size_t i = 0; i < m_service->GetHistorySize(); ++i) {
		
		auto pos = _countof(source) - 1 - i - offset;
		ASSERT_EQ(lib::IsZero(source[pos][2]), lib::IsZero(source[pos][3]));
		if (lib::IsZero(source[pos][2])) {
			++offset;
			--pos;
		}
		ASSERT_LT(0, pos);

		const svc::BollingerBandsService::Point &point
			= m_service->GetHistoryPointByReversedIndex(i);

		EXPECT_NEAR(source[pos][2], point.high, 0.00000000001)
			<< "i = " << i << ";"
			<< " pos = " << pos << ";"
			<< " source = " << source[pos][0] << ";"
			<< " ma = " << source[pos][1] << ";"
			<< " high = " << point.high << ";"
			<< " low = " << point.low << ";";
			
		EXPECT_NEAR(source[pos][3], point.low, 0.00000000001)
			<< "i = " << i << ";"
			<< " pos = " << pos << ";"
			<< " source = " << source[pos][0] << ";"
			<< " ma = " << source[pos][1] << ";"
			<< " high = " << point.high << ";"
			<< " low = " << point.low << ";";

	}

}

TEST_F(BollingerBandsServiceTest, RealTimeWithoutHistory) {

	std::string settingsString(
		"[Section]\n"
			"id = {00000000-0000-0000-0000-000000000001}\n");
	const lib::IniString settings(settingsString);
	m_service.reset(
		new svc::BollingerBandsService(
			m_context,
			"Tag",
			lib::IniSectionRef(settings, "Section")));

	TestOnlineResult();

	EXPECT_THROW(
		m_service->GetHistorySize(),
		svc::BollingerBandsService::HasNotHistory);
	EXPECT_THROW(
		m_service->GetHistoryPoint(0),
		svc::BollingerBandsService::HasNotHistory);
	EXPECT_THROW(
		m_service->GetHistoryPointByReversedIndex(0),
		svc::BollingerBandsService::HasNotHistory);

}

////////////////////////////////////////////////////////////////////////////////
