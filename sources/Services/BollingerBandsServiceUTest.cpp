/**************************************************************************
 *   Created: 2013/11/17 13:38:56
 *    Author: Eugene V. Palchukovsky
 *    E-mail: eugene@palchukovsky.com
 * -------------------------------------------------------------------
 *   Project: Trading Robot Development Kit
 *       URL: http://robotdk.com
 * Copyright: Eugene V. Palchukovsky
 **************************************************************************/

#include "Prec.hpp"
#include "Core/ContextMock.hpp"
#include "Core/SecurityMock.hpp"
#include "BarServiceMock.hpp"
#include "BollingerBandsService.hpp"

namespace pt = boost::posix_time;
namespace lib = trdk::Lib;
namespace svc = trdk::Services;

using namespace testing;
using namespace trdk::Tests;

////////////////////////////////////////////////////////////////////////////////

namespace {

const double source[][4] = {
    /* Close            SMA           High            Low */
    {1642.81, 0.00000000000, 0.00000000000, 0.00000000000},
    {1626.13, 0.00000000000, 0.00000000000, 0.00000000000},
    {1612.52, 0.00000000000, 0.00000000000, 0.00000000000},
    {1636.36, 0.00000000000, 0.00000000000, 0.00000000000},
    {1626.73, 0.00000000000, 0.00000000000, 0.00000000000},
    {1639.04, 0.00000000000, 0.00000000000, 0.00000000000},
    {1651.81, 0.00000000000, 0.00000000000, 0.00000000000},
    {1628.93, 0.00000000000, 0.00000000000, 0.00000000000},
    {1588.19, 0.00000000000, 0.00000000000, 0.00000000000},
    {1592.43, 0.00000000000, 0.00000000000, 0.00000000000},
    {1573.09, 0.00000000000, 0.00000000000, 0.00000000000},
    {1588.03, 0.00000000000, 0.00000000000, 0.00000000000},
    {1603.26, 0.00000000000, 0.00000000000, 0.00000000000},
    {1613.20, 0.00000000000, 0.00000000000, 0.00000000000},
    {1606.28, 0.00000000000, 0.00000000000, 0.00000000000},
    {1614.96, 0.00000000000, 0.00000000000, 0.00000000000},
    {1614.08, 0.00000000000, 0.00000000000, 0.00000000000},
    {1615.41, 0.00000000000, 0.00000000000, 0.00000000000},
    {1631.89, 0.00000000000, 0.00000000000, 0.00000000000},
    {1640.46, 1617.28050000000, 1658.22878615461, 1576.33221384539},
    {1652.32, 1617.75600000000, 1660.07691653072, 1575.43508346928},
    {1652.62, 1619.08050000000, 1663.94828018801, 1574.21271981199},
    {1675.02, 1622.20550000000, 1673.11024141963, 1571.30075858036},
    {1680.19, 1624.39700000000, 1681.00488358524, 1567.78911641476},
    {1682.50, 1627.18550000000, 1689.21333809710, 1565.15766190290},
    {1676.26, 1629.04650000000, 1694.52286895094, 1563.57013104906},
    {1680.91, 1630.50150000000, 1699.15290880565, 1561.85009119435},
    {1689.37, 1633.52350000000, 1706.79758908339, 1560.24941091661},
    {1692.09, 1638.71850000000, 1713.12361925264, 1564.31338074736},
    {1695.53, 1643.87350000000, 1719.01875887240, 1568.72824112760},
    {1692.39, 1649.83850000000, 1720.35937925572, 1579.31762074428},
    {1685.94, 1654.73400000000, 1720.86974113896, 1588.59825886104},
    {1690.25, 1659.08350000000, 1722.49190930823, 1595.67509069177},
    {1691.65, 1663.00600000000, 1724.24437535402, 1601.76762464598},
    {1685.33, 1666.95850000000, 1723.02768914163, 1610.88931085837},
    {1685.96, 1670.50850000000, 1721.74117093369, 1619.27582906631},
    {1685.73, 1674.09100000000, 1718.62136083393, 1629.56063916607},
    {1706.87, 1678.66400000000, 1716.41985167891, 1640.90814832109},
    {1709.67, 1682.55300000000, 1716.01521815720, 1649.09078184280},
    {1707.14, 1685.88700000000, 1714.90075198074, 1656.87324801926},
    {1697.37, 1688.13950000000, 1713.08996971502, 1663.18903028498},
    {1690.91, 1690.05400000000, 1708.95037150355, 1671.15762849645},
    {1697.48, 1691.17700000000, 1709.00543806956, 1673.34856193044},
    {1691.42, 1691.73850000000, 1708.83999265415, 1674.63700734585},
    {1689.47, 1692.08700000000, 1708.69827580892, 1675.47572419108},
    {1694.16, 1692.98200000000, 1707.93161752019, 1678.03238247981},
    {1685.39, 1693.20600000000, 1707.54724876013, 1678.86475123987},
    {1661.32, 1691.80350000000, 1711.75854475064, 1671.84845524936},
    {1655.83, 1689.99050000000, 1715.36485829730, 1664.61614170270},
    {1646.06, 1687.51700000000, 1719.12753311793, 1655.90646688207},
    {1652.35, 1685.51500000000, 1720.52625733246, 1650.50374266754},
    {1642.80, 1683.35800000000, 1723.00715716633, 1643.70884283367},
    {1656.96, 1681.69350000000, 1722.81337805186, 1640.57362194814},
    {1663.50, 1680.28600000000, 1721.87078635270, 1638.70121364730},
    {1656.78, 1678.85850000000, 1721.59679022083, 1636.12020977917},
    {1630.48, 1676.08450000000, 1723.55860598421, 1628.61039401579},
    {1634.96, 1673.54600000000, 1724.02027637916, 1623.07172362084},
    {1638.17, 1670.11100000000, 1720.39668539853, 1619.82531460147},
    {1632.97, 1666.27600000000, 1715.59870406213, 1616.95329593787},
    {1639.77, 1662.90750000000, 1709.74639703014, 1616.06860296986},
    {1653.08, 1660.69300000000, 1704.92024730299, 1616.46575269701},
    {1655.08, 1658.90150000000, 1700.93600072262, 1616.86699927738},
    {1655.17, 1656.78600000000, 1694.91895918231, 1618.65304081769},
    {1671.71, 1655.80050000000, 1691.22478685238, 1620.37621314762},
    {1683.99, 1655.52650000000, 1689.97620727016, 1621.07679272984},
    {1689.13, 1655.27500000000, 1688.64952471572, 1621.90047528428},
    {1683.42, 1655.17650000000, 1688.20475534296, 1622.14824465704},
    {1687.99, 1656.51000000000, 1692.44813295095, 1620.57186704905},
    {1697.60, 1658.59850000000, 1698.74432432832, 1618.45267567168},
    {1704.76, 1661.53350000000, 1705.94030500779, 1617.12669499221},
    {1725.52, 1665.19200000000, 1717.34957801125, 1613.03442198875},
    {1722.34, 1669.16900000000, 1725.82626145870, 1612.51173854130},
    {1709.91, 1671.81650000000, 1730.84329163736, 1612.78970836264},
    {1701.84, 1673.73350000000, 1734.03202279285, 1613.43497720715},
    {1697.42, 1675.76550000000, 1736.38003273762, 1615.15096726238},
    {1692.77, 1678.88000000000, 1736.17743833715, 1621.58256166285},
    {1698.67, 1682.06550000000, 1736.24060811249, 1627.89039188751},
    {1691.75, 1684.74450000000, 1735.13923284977, 1634.34976715023},
    {1681.55, 1687.17350000000, 1731.69259849716, 1642.65440150284},
    {1695.00, 1689.93500000000, 1728.84873870499, 1651.02126129501},
    {1693.87, 1691.97450000000, 1727.03272954743, 1656.91627045257},
    {1678.66, 1693.15350000000, 1724.56581686775, 1661.74118313225},
    {1690.50, 1694.92000000000, 1721.13279305988, 1668.70720694012},
    {1676.12, 1695.14050000000, 1720.63291493072, 1669.64808506928},
    {1655.45, 1693.71350000000, 1724.24083743712, 1663.18616256288},
    {1656.40, 1692.07700000000, 1726.65247633801, 1657.50152366199},
    {1692.56, 1692.53400000000, 1726.88055872136, 1658.18744127864},
    {1703.20, 1693.29450000000, 1727.87767190484, 1658.71132809516},
    {1710.14, 1693.92150000000, 1729.24104092284, 1658.60195907716},
    {1698.06, 1693.58650000000, 1728.61437305847, 1658.55862694153},
    {1721.54, 1693.38750000000, 1727.72586680741, 1659.04913319259},
    {1733.15, 1693.92800000000, 1730.34937701955, 1657.50662298045},
    {1744.50, 1695.65750000000, 1737.78792362711, 1653.52707637289},
    {1744.66, 1697.79850000000, 1745.01334312163, 1650.58365687837},
    {1754.67, 1700.66100000000, 1753.98370281972, 1647.33829718028},
    {1746.38, 1703.34150000000, 1760.08797241019, 1646.59502758981},
    {1752.07, 1706.01150000000, 1766.52740940406, 1645.49559059594},
    {1759.77, 1709.41250000000, 1773.85802176063, 1644.96697823937},
    {1762.11, 1713.44050000000, 1780.43652718818, 1646.44447281182},
    {1771.95, 1717.28800000000, 1788.32261511123, 1646.25338488877},
    {1763.31, 1720.76000000000, 1793.64087375986, 1647.87912624014},
    {1756.54, 1724.65400000000, 1796.43511517663, 1652.87288482337},
    {1761.64, 1728.21100000000, 1799.92022671456, 1656.50177328544},
    {1767.93, 1732.80150000000, 1802.30508099408, 1663.29791900592},
    {1762.97, 1738.17750000000, 1799.00939159479, 1677.34560840521},
    {1770.49, 1743.88200000000, 1793.29517014724, 1694.46882985276},
    {1747.15, 1746.61150000000, 1790.05349731826, 1703.16950268174},
    {1770.61, 1749.98200000000, 1789.73171677887, 1710.23228322114},
    {1771.89, 1753.06950000000, 1789.40714520439, 1716.73185479561},
};

class Service : public svc::BollingerBandsService {
 public:
  explicit Service(trdk::Context &context,
                   const std::string &instanceName,
                   const lib::IniSectionRef &conf)
      : BollingerBandsService(context, instanceName, conf) {}

  virtual ~Service() noexcept {}

 public:
  using BollingerBandsService::OnServiceDataUpdate;
};

class BollingerBandsServiceTest : public testing::Test {
 protected:
  virtual void SetUp() {}

  virtual void TearDown() { m_service.reset(); }

 protected:
  void TestOnlineResult() {
    SCOPED_TRACE(__FUNCTION__);

    MockSecurity security;

    Mocks::BarService bars;
    EXPECT_CALL(bars, GetSecurity()).WillRepeatedly(ReturnRef(security));

    pt::ptime time = pt::microsec_clock::local_time();

    for (const auto &row : source) {
      time += pt::seconds(123);

      svc::BarService::Bar bar;
      bar.time = time;
      bar.closeTradePrice = trdk::ScaledPrice(lib::Scale(row[0], 100));
      EXPECT_CALL(bars, GetLastBar()).Times(1).WillOnce(Return(bar));

      ASSERT_EQ(!lib::IsZero(row[1]),
                m_service->OnServiceDataUpdate(
                    bars, lib::TimeMeasurement::Milestones()));
      if (lib::IsZero(row[1])) {
        EXPECT_TRUE(m_service->IsEmpty());
        EXPECT_THROW(m_service->GetLastPoint(),
                     svc::BollingerBandsService::ValueDoesNotExistError);
        continue;
      }
      ASSERT_FALSE(m_service->IsEmpty());
      const Service::Point &point = m_service->GetLastPoint();

      EXPECT_EQ(time, point.time);
      EXPECT_DOUBLE_EQ(row[0], point.source);
      EXPECT_NEAR(row[1], point.middle, 0.00000000001);
      EXPECT_NEAR(row[2], point.high, 0.00000000001);
      EXPECT_NEAR(row[3], point.low, 0.00000000001);
    }
  }

 protected:
  Mocks::Context m_context;
  std::unique_ptr<Service> m_service;
};
}

TEST_F(BollingerBandsServiceTest, RealTimeWithHistory) {
  std::string settingsString(
      "[Section]\n"
      "id = {00000000-0000-0000-0000-000000000000}\n"
      "id.low = {00000000-0000-0000-0000-000000000000}\n"
      "id.high = {00000000-0000-0000-0000-000000000000}\n"
      "period = 20\n"
      "deviation = 2\n"
      "history = yes\n"
      "log = none\n");
  const lib::IniString settings(settingsString);
  m_service = boost::make_unique<Service>(
      m_context, "Test", lib::IniSectionRef(settings, "Section"));

  TestOnlineResult();

  ASSERT_NO_THROW(m_service->GetHistorySize());
  ASSERT_EQ(90, m_service->GetHistorySize());
  EXPECT_THROW(m_service->GetHistoryPoint(91),
               svc::BollingerBandsService::ValueDoesNotExistError);
  EXPECT_THROW(m_service->GetHistoryPointByReversedIndex(91),
               svc::BollingerBandsService::ValueDoesNotExistError);

  size_t offset = 19;
  for (size_t i = 0; i < m_service->GetHistorySize(); ++i) {
    auto pos = i + offset;
    ASSERT_EQ(lib::IsZero(source[pos][2]), lib::IsZero(source[pos][3]));
    if (lib::IsZero(source[pos][2])) {
      ++offset;
      ++pos;
    }
    ASSERT_LT(pos, _countof(source));

    const svc::BollingerBandsService::Point &point =
        m_service->GetHistoryPoint(i);

    EXPECT_DOUBLE_EQ(source[pos][0], point.source)
        << "i = " << i << ";"
        << " pos = " << pos << ";"
        << " source = " << source[pos][0] << ";"
        << " ma = " << source[pos][1] << ";"
        << " high = " << point.high << ";"
        << " low = " << point.low << ";";

    EXPECT_NEAR(source[pos][2], point.high, 0.00000000001)
        << "i = " << i << ";"
        << " pos = " << pos << ";"
        << " source = " << source[pos][0] << ";"
        << " ma = " << source[pos][1] << ";"
        << " high = " << point.high << ";"
        << " low = " << point.low << ";";

    EXPECT_NEAR(source[pos][3], point.low, 0.00000000001)
        << "i = " << i << ";"
        << " pos = " << pos << ";"
        << " source = " << source[pos][0] << ";"
        << " ma = " << source[pos][1] << ";"
        << " high = " << point.high << ";"
        << " low = " << point.low << ";";
  }

  offset = 0;
  for (size_t i = 0; i < m_service->GetHistorySize(); ++i) {
    auto pos = _countof(source) - 1 - i - offset;
    ASSERT_EQ(lib::IsZero(source[pos][2]), lib::IsZero(source[pos][3]));
    if (lib::IsZero(source[pos][2])) {
      ++offset;
      --pos;
    }
    ASSERT_LT(0, pos);

    const svc::BollingerBandsService::Point &point =
        m_service->GetHistoryPointByReversedIndex(i);

    EXPECT_NEAR(source[pos][2], point.high, 0.00000000001)
        << "i = " << i << ";"
        << " pos = " << pos << ";"
        << " source = " << source[pos][0] << ";"
        << " ma = " << source[pos][1] << ";"
        << " high = " << point.high << ";"
        << " low = " << point.low << ";";

    EXPECT_NEAR(source[pos][3], point.low, 0.00000000001)
        << "i = " << i << ";"
        << " pos = " << pos << ";"
        << " source = " << source[pos][0] << ";"
        << " ma = " << source[pos][1] << ";"
        << " high = " << point.high << ";"
        << " low = " << point.low << ";";
  }
}

TEST_F(BollingerBandsServiceTest, RealTimeWithoutHistory) {
  std::string settingsString(
      "[Section]\n"
      "id = {00000000-0000-0000-0000-000000000001}\n"
      "id.low = {00000000-0000-0000-0000-000000000000}\n"
      "id.high = {00000000-0000-0000-0000-000000000000}\n"
      "period = 20\n"
      "deviation = 2\n"
      "log = none\n");
  const lib::IniString settings(settingsString);
  m_service = boost::make_unique<Service>(
      m_context, "Test", lib::IniSectionRef(settings, "Section"));

  TestOnlineResult();

  EXPECT_THROW(m_service->GetHistorySize(),
               svc::BollingerBandsService::HasNotHistory);
  EXPECT_THROW(m_service->GetHistoryPoint(0),
               svc::BollingerBandsService::HasNotHistory);
  EXPECT_THROW(m_service->GetHistoryPointByReversedIndex(0),
               svc::BollingerBandsService::HasNotHistory);
}

////////////////////////////////////////////////////////////////////////////////
