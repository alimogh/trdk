/**************************************************************************
 *   Created: 2016/12/24 16:57:52
 *    Author: Eugene V. Palchukovsky
 *    E-mail: eugene@palchukovsky.com
 * -------------------------------------------------------------------
 *   Project: Trading Robot Development Kit
 *       URL: http://robotdk.com
 * Copyright: Eugene V. Palchukovsky
 **************************************************************************/

#include "Prec.hpp"
#include "RelativeStrengthIndexService.hpp"
#include "Tests/MockMarketDataSource.hpp"
#include "Tests/MockContext.hpp"
#include "Tests/MockSecurity.hpp"
#include "Tests/MockBarService.hpp"

using namespace testing;
using namespace trdk::Tests;

namespace lib = trdk::Lib;
namespace svc = trdk::Services;
namespace pt = boost::posix_time;

namespace {

	const double source[][2] = {
		{	1642.81000000000	,	0.00000000000	},
		{	1626.13000000000	,	0.00000000000	},
		{	1612.52000000000	,	0.00000000000	},
		{	1636.36000000000	,	0.00000000000	},
		{	1626.73000000000	,	0.00000000000	},
		{	1639.04000000000	,	0.00000000000	},
		{	1651.81000000000	,	0.00000000000	},
		{	1628.93000000000	,	0.00000000000	},
		{	1588.19000000000	,	0.00000000000	},
		{	1592.43000000000	,	0.00000000000	},
		{	1573.09000000000	,	0.00000000000	},
		{	1588.03000000000	,	0.00000000000	},
		{	1603.26000000000	,	0.00000000000	},
		{	1613.20000000000	,	0.00000000000	},
		{	1606.28000000000	,	41.81198726857	},
		{	1614.96000000000	,	46.31158624859	},
		{	1614.08000000000	,	45.89641250656	},
		{	1615.41000000000	,	46.72922288703	},
		{	1631.89000000000	,	56.33816403349	},
		{	1640.46000000000	,	60.60228092600	},
		{	1652.32000000000	,	65.91738518696	},
		{	1652.62000000000	,	66.05106055637	},
		{	1675.02000000000	,	74.62527736161	},
		{	1680.19000000000	,	76.22442896273	},
		{	1682.50000000000	,	76.97260281960	},
		{	0.00000000000	,	2.80449473480	},
		{	1676.26000000000	,	53.88512682229	},
		{	1680.91000000000	,	53.96256954879	},
		{	1689.37000000000	,	54.12429845583	},
		{	1692.09000000000	,	54.18400750049	},
		{	1695.53000000000	,	54.27086111016	},
		{	1692.39000000000	,	54.16272011723	},
		{	1685.94000000000	,	53.90812163329	},
		{	1690.25000000000	,	54.07456790038	},
		{	1691.65000000000	,	54.13664253462	},
		{	1685.33000000000	,	53.75816309850	},
		{	1685.96000000000	,	53.79531733488	},
		{	1685.73000000000	,	53.77711588591	},
		{	1706.87000000000	,	55.37826932653	},
		{	1709.67000000000	,	55.61324896170	},
		{	1707.14000000000	,	55.30958405608	},
		{	1697.37000000000	,	53.99587596003	},
		{	1690.91000000000	,	53.03482702531	},
		{	1697.48000000000	,	53.99569591947	},
		{	1691.42000000000	,	52.84503449117	},
		{	1689.47000000000	,	52.43019529729	},
		{	1694.16000000000	,	53.44441838069	},
		{	1685.39000000000	,	51.09399219427	},
		{	1661.32000000000	,	44.84786986258	},
		{	1655.83000000000	,	43.44997552565	},
		{	1646.06000000000	,	40.83631489948	},
		{	1652.35000000000	,	43.36697271066	},
		{	1642.80000000000	,	40.34384737353	},
		{	1656.96000000000	,	46.70049334176	},
		{	1663.50000000000	,	49.56448434978	},
		{	1656.78000000000	,	46.59598865614	},
		{	1630.48000000000	,	36.67652134498	},
		{	1634.96000000000	,	39.21967730056	},
		{	1638.17000000000	,	41.17293843971	},
		{	1632.97000000000	,	38.83990134382	},
		{	1639.77000000000	,	43.65718069709	},
		{	1653.08000000000	,	52.16630110775	},
		{	1655.08000000000	,	53.38684784525	},
		{	1655.17000000000	,	53.44852357957	},
		{	1671.71000000000	,	63.64794847193	},
		{	1683.99000000000	,	69.39277533333	},
		{	1689.13000000000	,	71.56318460817	},
		{	1683.42000000000	,	65.60045101023	},
		{	1687.99000000000	,	68.05822945938	},
		{	1697.60000000000	,	72.77748341615	},
		{	1704.76000000000	,	75.84545144464	},
		{	1725.52000000000	,	82.45905080635	},
		{	1722.34000000000	,	78.65277140002	},
		{	1709.91000000000	,	65.09981596736	},
		{	1701.84000000000	,	57.65722685476	},
		{	1697.42000000000	,	53.77216075551	},
		{	1692.77000000000	,	49.70645414709	},
		{	1698.67000000000	,	54.71882504965	},
		{	1691.75000000000	,	48.21570917026	},
		{	1681.55000000000	,	40.10862802490	},
		{	1695.00000000000	,	52.30920887603	},
		{	1693.87000000000	,	51.29621771657	},
		{	1678.66000000000	,	39.43544620007	},
		{	1690.50000000000	,	49.85056117437	},
		{	1676.12000000000	,	40.16996524416	},
		{	1655.45000000000	,	30.38395198583	},
		{	1656.40000000000	,	31.27186402480	},
		{	1692.56000000000	,	55.94806475736	},
		{	1703.20000000000	,	60.73453719805	},
		{	1710.14000000000	,	63.70271846513	},
		{	1698.06000000000	,	55.30603815089	},
		{	1721.54000000000	,	65.50371136394	},
		{	1733.15000000000	,	69.47709206042	},
		{	1744.50000000000	,	72.98683153376	},
		{	1744.66000000000	,	73.03726107389	},
		{	1754.67000000000	,	76.23932667896	},
		{	1746.38000000000	,	68.46917215145	},
		{	1752.07000000000	,	70.82411456348	},
		{	1759.77000000000	,	73.87123843342	},
		{	1762.11000000000	,	74.79431475756	},
		{	1771.95000000000	,	78.48268139027	},
		{	1763.31000000000	,	68.34966963749	},
		{	1756.54000000000	,	61.20511347785	},
		{	1761.64000000000	,	64.43638974501	},
		{	1767.93000000000	,	68.20504332732	},
		{	1762.97000000000	,	62.20713889725	},
		{	1770.49000000000	,	67.24599075670	},
		{	1747.15000000000	,	45.51405993093	},
		{	1770.61000000000	,	60.36828117814	},
		{	1771.89000000000	,	61.03700628216	},
	};

	class Service : public svc::RelativeStrengthIndexService {

	public:

		explicit Service(
				trdk::Context &context,
				const std::string &tag,
				const lib::IniSectionRef &conf)
			: RelativeStrengthIndexService(context, tag, conf) {
			//...//
		}

		virtual ~Service() noexcept {
			//...//
		}

	public:

		using RelativeStrengthIndexService::OnServiceDataUpdate;

	};

}

TEST(RelativeStrengthIndexService, General) {

	const lib::IniString settings(
		"[Section]\n"
			"id = {00000000-0000-0000-0000-000000000000}\n"
			"period = 14\n"
			"log = none");

	MockContext context;
	MockMarketDataSource marketDataSource;
	MockSecurity security;
	MockBarService bars;
	EXPECT_CALL(bars, GetSecurity())
		.WillRepeatedly(ReturnRef(security));

	Service service(context, "Tag", lib::IniSectionRef(settings, "Section"));

	pt::ptime time = pt::microsec_clock::local_time();
	for (const auto &row: source) {
			
		time += pt::seconds(123);
		
		svc::BarService::Bar bar;
		bar.time = time;
		bar.closeTradePrice = trdk::ScaledPrice(lib::Scale(row[0], 100));
		EXPECT_CALL(bars, GetLastBar()).Times(1).WillOnce(Return(bar));

		ASSERT_EQ(
			!lib::IsZero(row[1]),
			service.OnServiceDataUpdate(
				bars,
				lib::TimeMeasurement::Milestones()));
		if (lib::IsZero(row[1])) {
			EXPECT_TRUE(service.IsEmpty());
			EXPECT_THROW(
				service.GetLastPoint(),
				svc::RelativeStrengthIndexService::ValueDoesNotExistError);
			continue;
		}
		ASSERT_FALSE(service.IsEmpty());

		EXPECT_EQ(time, service.GetLastPoint().time);
		EXPECT_DOUBLE_EQ(row[0], service.GetLastPoint().source);
		EXPECT_NEAR(row[1], service.GetLastPoint().value, 0.00000000001);

	}

}
