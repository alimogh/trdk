/**************************************************************************
 *   Created: 2016/12/24 16:57:52
 *    Author: Eugene V. Palchukovsky
 *    E-mail: eugene@palchukovsky.com
 * -------------------------------------------------------------------
 *   Project: Trading Robot Development Kit
 *       URL: http://robotdk.com
 * Copyright: Eugene V. Palchukovsky
 **************************************************************************/

#include "Prec.hpp"
#include "Core/ContextMock.hpp"
#include "Core/MarketDataSourceMock.hpp"
#include "Core/SecurityMock.hpp"
#include "BarServiceMock.hpp"
#include "RsiIndicator.hpp"

using namespace testing;
using namespace trdk::Tests;

namespace lib = trdk::Lib;
namespace svc = trdk::Services;
namespace is = trdk::Services::Indicators;
namespace pt = boost::posix_time;

namespace {

const double source[][2] = {
    //             Close                                RSI
    {1642.81000000000, 0.00000000000},  {1626.13000000000, 0.00000000000},
    {1612.52000000000, 0.00000000000},  {1636.36000000000, 0.00000000000},
    {1626.73000000000, 0.00000000000},  {1639.04000000000, 0.00000000000},
    {1651.81000000000, 0.00000000000},  {1628.93000000000, 0.00000000000},
    {1588.19000000000, 0.00000000000},  {1592.43000000000, 0.00000000000},
    {1573.09000000000, 0.00000000000},  {1588.03000000000, 0.00000000000},
    {1603.26000000000, 0.00000000000},  {1613.20000000000, 0.00000000000},
    {1606.28000000000, 41.81198726857}, {1614.96000000000, 44.15227226843},
    {1614.08000000000, 43.95923862141}, {1615.41000000000, 44.35520485886},
    {1631.89000000000, 49.14964972088}, {1640.46000000000, 51.49037268856},
    {1652.32000000000, 54.60464131142}, {1652.62000000000, 54.68389180691},
    {1675.02000000000, 60.26223712522}, {1680.19000000000, 61.44199939813},
    {1682.50000000000, 61.98506397341}, {0.00000000000, 5.14504817062},
    {1676.26000000000, 52.18693391751}, {1680.91000000000, 52.25766732890},
    {1689.37000000000, 52.39565069539}, {1692.09000000000, 52.44324101000},
    {1695.53000000000, 52.50790574255}, {1692.39000000000, 52.43781579765},
    {1685.94000000000, 52.28342911503}, {1690.25000000000, 52.38431201186},
    {1691.65000000000, 52.41950148425}, {1685.33000000000, 52.23184146564},
    {1685.96000000000, 52.25019241974}, {1685.73000000000, 52.24230173990},
    {1706.87000000000, 52.94567827561}, {1709.67000000000, 53.04432219844},
    {1707.14000000000, 52.93633510268}, {1697.37000000000, 52.49192473682},
    {1690.91000000000, 52.17999485617}, {1697.48000000000, 52.48921955911},
    {1691.42000000000, 52.15421868200}, {1689.47000000000, 52.03912473534},
    {1694.16000000000, 52.31170708452}, {1685.39000000000, 51.71976582298},
    {1661.32000000000, 50.04594190687}, {1655.83000000000, 49.65124448017},
    {1646.06000000000, 48.91195026170}, {1652.35000000000, 49.43396984541},
    {1642.80000000000, 48.62163618222}, {1656.96000000000, 49.93530267464},
    {1663.50000000000, 50.56400820792}, {1656.78000000000, 49.87099749115},
    {1630.48000000000, 47.14749225766}, {1634.96000000000, 47.67172426407},
    {1638.17000000000, 48.06918549243}, {1632.97000000000, 47.44056120212},
    {1639.77000000000, 48.39103424361}, {1653.08000000000, 50.28608512222},
    {1655.08000000000, 50.57974010009}, {1655.17000000000, 50.59388296271},
    {1671.71000000000, 53.24216578576}, {1683.99000000000, 55.16375443584},
    {1689.13000000000, 55.97923397590}, {1683.42000000000, 54.78711410382},
    {1687.99000000000, 55.60204487982}, {1697.60000000000, 57.34320450743},
    {1704.76000000000, 58.64452117485}, {1725.52000000000, 62.24127789321},
    {1722.34000000000, 61.36092986389}, {1709.91000000000, 57.91283344489},
    {1701.84000000000, 55.72349498539}, {1697.42000000000, 54.50805862363},
    {1692.77000000000, 53.19353588225}, {1698.67000000000, 54.68673088236},
    {1691.75000000000, 52.56849180412}, {1681.55000000000, 49.52351997255},
    {1695.00000000000, 53.35991966843}, {1693.87000000000, 52.99548932101},
    {1678.66000000000, 48.22155906982}, {1690.50000000000, 51.85715871658},
    {1676.12000000000, 47.49531848134}, {1655.45000000000, 42.02363545553},
    {1656.40000000000, 42.35235047124}, {1692.56000000000, 53.22370956615},
    {1703.20000000000, 55.86137051993}, {1710.14000000000, 57.54305479095},
    {1698.06000000000, 53.70729794691}, {1721.54000000000, 59.37569130343},
    {1733.15000000000, 61.86237154468}, {1744.50000000000, 64.17131428276},
    {1744.66000000000, 64.20421460709}, {1754.67000000000, 66.28980647925},
    {1746.38000000000, 63.01528050123}, {1752.07000000000, 64.31812266203},
    {1759.77000000000, 66.06048413735}, {1762.11000000000, 66.59433566839},
    {1771.95000000000, 68.81567602943}, {1763.31000000000, 64.74466472409},
    {1756.54000000000, 61.66628410041}, {1761.64000000000, 63.09001651283},
    {1767.93000000000, 64.82519556706}, {1762.97000000000, 62.33657273561},
    {1770.49000000000, 64.55810693752}, {1747.15000000000, 53.92641445126},
    {1770.61000000000, 60.89705823945}, {1771.89000000000, 61.24160903991},
};

class Service : public is::Rsi {
 public:
  explicit Service(trdk::Context &context,
                   const std::string &instanceName,
                   const lib::IniSectionRef &conf)
      : Rsi(context, instanceName, conf) {}

 public:
  using Rsi::OnServiceDataUpdate;
};
}

TEST(RsiIndicator, General) {
  const lib::IniString settings(
      "[Section]\n"
      "id = {00000000-0000-0000-0000-000000000000}\n"
      "period = 14\n"
      "log = none");

  Mocks::Context context;
  Mocks::MarketDataSource marketDataSource;
  MockSecurity security;
  Mocks::BarService bars;
  EXPECT_CALL(bars, GetSecurity()).WillRepeatedly(ReturnRef(security));

  Service service(context, "Test", lib::IniSectionRef(settings, "Section"));

  pt::ptime time = pt::microsec_clock::local_time();
  for (const auto &row : source) {
    time += pt::seconds(123);

    svc::BarService::Bar bar;
    bar.time = time;
    bar.closeTradePrice = trdk::ScaledPrice(lib::Scale(row[0], 100));
    EXPECT_CALL(bars, GetLastBar()).Times(1).WillOnce(Return(bar));

    ASSERT_EQ(
        !lib::IsZero(row[1]),
        service.OnServiceDataUpdate(bars, lib::TimeMeasurement::Milestones()));
    if (lib::IsZero(row[1])) {
      EXPECT_TRUE(service.IsEmpty());
      EXPECT_THROW(service.GetLastPoint(), is::Rsi::ValueDoesNotExistError);
      continue;
    }
    ASSERT_FALSE(service.IsEmpty());

    EXPECT_EQ(time, service.GetLastPoint().time);
    EXPECT_DOUBLE_EQ(row[0], service.GetLastPoint().source);
    EXPECT_NEAR(row[1], service.GetLastPoint().value, 0.00000000001);
  }
}
